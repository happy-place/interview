package com.bigdata.designpattern.observer;

/**
 * 观察这模式（最复杂设计模式）
 * 通常包含3中角色： 事件(描述某状态)、事件源(发起事件的人)、事件监听器(事件处理者)
 * 1.事件内部封装了事件源，便于监听器针对不同事件源，执行响应
 * 2.事件源东昌被多个事件监听器监听；
 * 3.事件监听器，可以同时监听多个事件源，并针对不同源发起的事件，做出各自响应
 *
 * 适合：需要连续接力式处理某个对象的场景，与责任链相似；
 * 不同点：
 * 1.责任链上任意一环，可以终止传递，而观察者模式不行；
 * 2.责任链有回传阶段(后置处理)，观察者模式没有回传（只有前置处理）
 *
 * 常见诸如：观察者、监听器、钩子、回调 等都是观察者模式。
 *
 *
 *
 */
