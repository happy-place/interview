package com.bigdata.designpattern.singleton;

/**
 * 单例模式 使用场景很多，非常重要
 * 某些特殊情况下，需要JVM中只保存某个类单一实例需求，如：连接池、Manager对象，Factory对象
 * 单例设计模式：
 * 1.饿汉 （使用最广），JVM保证多线程安全，唯一谈不上缺点的缺点就是不支持延迟加载；
 * 2.懒汉 （volitile 关键字 + 双重检查），多线程安全同时，支持延迟加载；
 * 3.静态内部类 外部类唯一实例，在其静态内部类中创建，外部类加载时，静态内部类不会加载，只有在获取实例时，用到静态内部类，才会加载一次，
 *  并且在加载过程中完成静态成员变量创建，并且该静态成员变量指向就是外部类唯一实例；
 * 4.枚举类：由于没有构造器，枚举类天生就是单例模式，通过设置方法，可以将操作封装在方法中，并且也正是因为没有构造器，所以能避免通过反射，
 *  反序列化获取实例，进而进行违规操作，是公认最安全单例。
 *
 *  spring bean factory 默认产生对象就是单例模式
 */