package com.bigdata.source.hashcode;

/**
 * hashcode 相关算法使用场景：
 * 1.密码加密
 *   MD5 + salt
 *   不可逆、定长输出、幂等
 * 2.对象比较 equals
 *  2.1 基本数据类型 equals 相当于 == ，比较内容
 *  2.2 引用类型默认集成Object 类 equals ，是==，即比较地址
 *  2.3 通过重写可以实现自定义逻辑（字符类型获取hashCode*31 + 整数类型）,目标是保证最大离散度，不同key的hash肯定不同、极少数情况也有可能存在碰撞
 * 3. HashMap、HashSet 等hash结构中，作为key的代表，对数组长度取模，获取数组下标，方便快速定位元素
 *  为解决hash碰撞问题，相同下标存储的是连表，连表长度超过64时，转换为红黑树
 *
 * hashcode 重写
 *  离散因子31，循环参与到元素hash值迭代计算中
 *
 * equals 重写
 * 重写equals 方法时，一般默认要重写hashcode，
 *  1 相互比较对象使用 == 判断地址是否相同；
 *  2 被比较对象、是否为空、类型是否与当前对象一致；
 *  3 被比较对象强转为当前对象类型，然后按自定义逻辑，比较指定属性，并以此判断两个对象是否相同
 *
 *  注：JVM对象hash值，在对象创建时，就已经计算好了，保持在头中，后面使用直接提取
 */